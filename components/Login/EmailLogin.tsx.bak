import React, {useState, useContext, useEffect} from "react";
import { Grid, TextField } from '@material-ui/core';
import { useHistory } from "react-router-dom";
import { firebase, googleAuthProvider } from '../../firebase/firebase-config';
import { WarningAlert } from '../../alerts/WarningAlert';
import LoginContext from "../../context/LoginContext/LoginContext";
import {createMessageLoginModal} from '../../context/LoginContext/Actions'
import {LoginMessageModal} from './Modals/LoginMessageModal'

const EmailLogin = () =>{
    const history = useHistory();
    const [name, setName] = useState('')
    const [password, setPassword] = useState('')
    const [message, setMessage] = useState('')
    const {state,dispatch} = useContext(LoginContext)

    const createModal = (id:string, createModal:boolean) => {
        if(message !== ''){
            createMessageLoginModal({id, createModal},dispatch)
        }
        

    }
    useEffect(() =>{
        createModal('0',true)
    },[message])

    const obtenerNombre = (e: any) =>{
        if(e !== '') {
            setName(e)          
        }
    }

    const obtenerPassword = (e: any) =>{
        if(e !== '') {
            setPassword(e)            
        }
    }

    const singIn = () =>{
        if(name !== '' && password !== '') {
            firebase.auth().signInWithEmailAndPassword(name,password)
            .then((result) => {
                // User is signed in.
                // IdP data available in result.additionalUserInfo.profile.
            
                // Get the OAuth access token and ID Token
                //const credential = OAuthProvider.credentialFromResult(result);
                //const accessToken = credential.accessToken;
                //const idToken = credential.idToken;
                //console.log('Entro',result);
                setMessage('')
            })
            .catch((error) => {
                // Handle error.
                //console.log('No entro',error);

                if(error.code === 'auth/wrong-password'){
                    setMessage('Contraseña inválida.')
                    //WarningAlert({ text: 'La contraseña no es válida o el usuario no tiene contraseña.' });
                    
                }

                if(error.code === 'auth/too-many-requests'){
                    setMessage('Acceso inhabilitado temporalmente debido a intentos fallidos de inicio de sesión. Puede restableciendo la contraseña o intentar más tarde.')
                    //WarningAlert({ text: 'El acceso a esta cuenta se ha inhabilitado temporalmente debido a muchos intentos fallidos de inicio de sesión. Puede restaurarlo inmediatamente restableciendo su contraseña o puede volver a intentarlo más tarde.' });
                }

                if(error.code === 'auth/invalid-email'){
                    setMessage('Dirección de correo electrónico no existe.')
                    //WarningAlert({ text: 'La dirección de correo electrónico está mal formateada.' });
                }

                if(error.code === 'auth/user-not-found'){
                    setMessage('Usuario incorrecto.')
                    //WarningAlert({ text: 'No existe registro de usuario correspondiente a este identificador.' });
                }

                
            });
        }else{
            setMessage('Ingrese datos de usuario y contraseña')
        }
        
    }
    return (
        <>
            <div className='Conteiner-input'>
                <div className="div-input-standard-login">
                    <TextField
                    className="input-standard-login"
                    error={false}
                    type="text"
                    variant="outlined"
                    placeholder='E-mail'
                    onChange={(e: any) => obtenerNombre(e.target.value)}
                    />
                </div>
            </div>
            <div>
                <div className="div-input-standard-login">
                    <TextField
                    className="input-password-login"
                    error={false}
                    type="password"
                    inputProps={{style: { textAlign: 'left' }}}
                    variant="outlined"
                    placeholder='Contraseña'
                    onChange={(e: any) => obtenerPassword(e.target.value)}
                    />
                    
                </div>
            </div>
            <div className='conteiner-text-login'
            onClick = {() => history.push('/RecoverPassword')} 
            >
                ¿Olvidaste tu contraseña?
            </div>
            <div className='conteiner-botton-login'>
                <button onClick={singIn} className="boton-Header-login">
                    <div className="text-BotonHeader-login">
                        <b>Inciar sesión</b>
                    </div>
                </button> 
            </div>
            {state.createMessageLogin ? <LoginMessageModal message={message}/>: null}
        </>
    )
}

export default EmailLogin