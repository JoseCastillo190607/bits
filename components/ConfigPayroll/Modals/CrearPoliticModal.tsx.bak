import {
  Theme,
  Dialog,
  withStyles,
} from '@material-ui/core';
import '../Modal/CrearPayrollGroup.css';
import MuiDialogContent from '@material-ui/core/DialogContent';
import MuiDialogActions from '@material-ui/core/DialogActions';
import { useEffect, useState, useContext } from 'react';
import { SuccessfulAlert } from '../../../alerts/successAlerts';
import { PoliticModal } from '../../../interfaces/TabPolitic.interfaces';
import { useForm } from '../../../hooks/useForm';
import PoliticContext from "../../../context/ConfigPayrollContext/PoliticContext";
import { ErrorAlert } from '../../../alerts/errorAlert';
import { TabPoliticContext } from '../../../context/ConfigPayrollContext/TabPoliticContext';
import '../Politic.css'
import BpCheckbox from '../../ConfigPayroll/IOSSwitch/PoliticCheckbox';
import { getAllPolitic } from '../../../services/PoliticService';
import SaveIcon from '@material-ui/icons/Save';
import {updatePolitic} from '../../../helpers/Nomina/Politics'
import { useMutation } from "@apollo/client";
import { GET_ALL_POLITIC, CREATE_POLITIC } from "../../../Querys/querys";

const DialogContent = withStyles((theme: Theme) => ({
  root: {
      padding: theme.spacing(2),
  },
}))(MuiDialogContent);

const DialogActions = withStyles((theme: Theme) => ({
  root: {
      margin: 0,
      padding: theme.spacing(1),
  },
}))(MuiDialogActions);

const CreaPolitica = (props: any) => {
  
  const {state, dispatch} = useContext(PoliticContext)

  const [createNewPolitic] = useMutation(CREATE_POLITIC, {
    refetchQueries: [{ query: GET_ALL_POLITIC }],
  });

  const {
    PolicyName,
    EconomicDays,
    AnniversaryVacationPremium,
    PantryValueType,
    PantryValueCap,
    PantryValue,
    SavingsFundType,
    SavingsFundCap,
    SavingsFund,
    RestaurantValue,
    RestaurantValueType,
    RestaurantValueCap,
    AbsenceDiscount,
    DisabilityDiscount,
    VoucherCost,
    DiscountDay,
    SeniorityDate,
    ContractStartDate,
    onChange, formulario, reset, setForm
} = useForm<PoliticModal>({
    PolicyName: "",
    EconomicDays: "",
    AnniversaryVacationPremium: "",
    PantryValueType: "",
    PantryValueCap: "",
    PantryValue: "",
    SavingsFundType: "",
    SavingsFundCap: "",
    SavingsFund: "",
    RestaurantValue: "",
    RestaurantValueType: "",
    RestaurantValueCap: "",
    AbsenceDiscount: "",
    DisabilityDiscount: "",
    VoucherCost: "",
    DiscountDay: "",
    SeniorityDate: "",
    ContractStartDate: ""
});



  const [politics, setPolitics] = useState([]);
  const [value, setValue] = useState()

  const { addPoliticOpen, setAddPoliticOpen, PoliticDispatch} = useContext(TabPoliticContext);


  useEffect(() => {
    async function fetchData() {
        let result = await getAllPolitic();
        setPolitics(result);
    }
    fetchData();
    return () => {
        fetchData();
        setPolitics([]);
    }
}, [state]);

const handleClose = async () => {
  dispatch({ type: "CLOSE_POLITIC_MODAL" });
  setAddPoliticOpen();
}

const onChanges = async(e: any) => {
    let nuevoValor = e.target.value
    setValue(nuevoValor);
    await updatePolitic(e, state, dispatch, e.target.name, nuevoValor)
    console.log(state);
};

const onSumbit = async () => {
  if (formulario.PolicyName !== '' &&formulario.EconomicDays !== ''){
        console.log("policy_name:", formulario.PolicyName)
        console.log("economic_days:", formulario.EconomicDays)
        console.log("anniversary_vacation_premium:", state.AnniversaryVacationPremium)
        console.log("pantry_value_type:", formulario.PantryValueType)
        console.log("pantry_value_cap:", formulario.PantryValueCap)
        console.log("pantry_value:", state.PantryValue)
        console.log("saving_fund_type:", formulario.SavingsFundType)
        console.log("saving_fund_cap:", formulario.SavingsFundCap)
        console.log("saving_fund:", state.SavingsFund)
        console.log("restaurant_value:", state.RestaurantValue)
        console.log("restaurant_value_type:", formulario.RestaurantValueType)
        console.log("restaurant_value_cap:", formulario.RestaurantValueCap)
        console.log("absence_discount:", state.AbsenceDiscount)
        console.log("disability_discount:", state.DisabilityDiscount)
        console.log("voucher_cost:", state.VoucherCost)


    createNewPolitic({
      variables: {
        input: {
          policy_name: formulario.PolicyName,
          economic_days: formulario.EconomicDays,
          anniversary_vacation_premium: state.AnniversaryVacationPremium,
          pantry_value_type: formulario.PantryValueType,
          pantry_value_cap: formulario.PantryValueCap,
          pantry_value: state.PantryValue,
          saving_fund_type: formulario.SavingsFundType,
          saving_fund_cap: formulario.SavingsFundCap,
          saving_fund: state.SavingsFund,
          restaurant_value: state.RestaurantValue,
          restaurant_value_type: formulario.RestaurantValueType,
          restaurant_value_cap: formulario.RestaurantValueCap,
          absence_discount: state.AbsenceDiscount,
          disability_discount: state.DisabilityDiscount,
          voucher_cost: state.VoucherCost
        },
      },
    });

    await props.getDatos();
    SuccessfulAlert({ title: "¡Exito!", text: "¡Se ha añadido la política correctamente!" })
   
  } else{
      return ErrorAlert({ text: "Ingrese todos los datos." });
  }
  
  
  dispatch({ type: "CLOSE_POLITIC_MODAL" });
  setAddPoliticOpen();
}

  return(
    <div>
      <Dialog onClose={handleClose} aria-labelledby="customized-dialog-title" open={addPoliticOpen} fullWidth={false} maxWidth={"md"}>
        <div className="contenedorModalPolitics mt-10PoliticsModal">
          <p className="tituloModalPolitics">Crear nueva política</p>
        </div>
        <DialogContent className="dialogModalPolitics">
          <div className="contenedorModalPolitics mb32PoliticsModal">
            <div>
              <fieldset className="fieldsetModalPolitics">
                <legend className="legendFieldset">Nombre *</legend>
                <input 
                name="PolicyName"
                type="text"
                className="inputFieldsetModalPolitics"
                placeholder=''
                defaultValue={PolicyName}
                onChange={({ target }) => onChange(target.value as string, 'PolicyName')}/>
              </fieldset>
            </div>
          </div>
          <div className="contenedorModalPolitics mb21PoliticsModal">
            <div>
            <fieldset className="fieldsetModalPolitics">
                <legend className="legendFieldset">Días económicos *</legend>
                <input 
                name="EconomicDays"
                type="text"
                className="inputFieldsetModalPolitics"
                placeholder=''
                defaultValue={EconomicDays}
                onChange={({ target }) => onChange(target.value as string, 'EconomicDays')}/>
              </fieldset>
            </div>
          </div>
            <div className="contenedorModalPolitics mb31PoliticsModal" >
              <div className="filaDobleCheck">
                <BpCheckbox 
                  NombreCampo={'AnniversaryVacationPremium'}
                  Value={state.AnniversaryVacationPremium}
                />
                <span className="textoModalPolitics">Prima vacacional al aniversario</span>
              </div>
            </div>
          <div className="contenedorSegundoModalPolitics">
            <div className="contenedorsubtituloModalPolitics">
              <span className="subtituloModalPolitics">Vales de despensa</span><div className="iconoAtencion">¡</div>
            </div>
          </div>
          <div className="contenedorModalPolitics mb17PoliticsModal">
            <div className="contenedorSelectModalPolitics">
              <select
                value={PantryValueType}
                onChange={({ target }) => onChange(target.value as string, 'PantryValueType')}
                name="PantryValueType"
                className="selectModalPolitics"
              >
                <option value="Selecciona una de las categorias" disabled>Selecciona una de las categorías</option>
                <option value="Porcentual">Porcentual</option>
                <option value="Fijo">Fijo</option>
              </select>
              <div>
              <input 
                name="PantryValueCap"
                type="text"
                className="inputMedioModalPolitics"
                defaultValue={PantryValueCap}
                onChange={({ target }) => onChange(target.value as string, 'PantryValueCap')}/>
            </div>
            </div>       
          </div>
          <div className="contenedorModalPolitics mb31PoliticsModal" >
            <div className="filaDobleCheck">
              <BpCheckbox 
                  NombreCampo={'PantryValue'}
                  Value={state.PantryValue}
              />
              <span className="textoModalPolitics">Tope de vales de despensa</span>
            </div>
          </div>
          <div className="contenedorSegundoModalPolitics">
            <div className="contenedorsubtituloModalPolitics">
              <span className="subtituloModalPolitics">Fondo de ahorro</span><div className="iconoAtencion">¡</div>
            </div>
          </div>
          <div className="contenedorModalPolitics mb17PoliticsModal">
            <div className="contenedorSelectModalPolitics">
              <select
                value={SavingsFundType}
                onChange={({ target }) => onChange(target.value as string, 'SavingsFundType')}
                name="SavingsFundType"
                className="selectModalPolitics"
              >
                <option value="Selecciona una de las categorias" disabled>Selecciona una de las categorías</option>
                <option value="Porcentual">Porcentual</option>
                <option value="Fijo">Fijo</option>
              </select>
              <div>
              <input 
                name="SavingsFundCap"
                type="text"
                className="inputMedioModalPolitics"
                defaultValue={SavingsFundCap}
                onChange={({ target }) => onChange(target.value as string, 'SavingsFundCap')}/>
              
            </div>
            
            </div>       
          </div>
          <div className="contenedorModalPolitics mb31PoliticsModal" >
            <div className="filaDobleCheck">
              <BpCheckbox
                  NombreCampo={'SavingsFund'}
                  Value={state.SavingsFund}
              />
              <span className="textoModalPolitics">Tope de fondo de ahorro</span>
            </div>
          </div>
          <div className="contenedorSegundoModalPolitics">
            <div className="contenedorsubtituloModalPolitics">
              <span className="subtituloModalPolitics">Vales de restaurante</span><div className="iconoAtencion">¡</div>
            </div>
          </div>
          <div className="contenedorModalPolitics mb17PoliticsModal">
            <div className="contenedorSelectModalPolitics">
              <select
                value={RestaurantValueType}
                onChange={({ target }) => onChange(target.value as string, 'RestaurantValueType')}
                name="RestaurantValueType"
                className="selectModalPolitics"
              >
                <option value="Selecciona una de las categorias" disabled>Selecciona una de las categorías</option>
                <option value="Porcentual">Porcentual</option>
                <option value="Fijo">Fijo</option>
              </select>
              <div>
              <input 
                name="RestaurantValueCap"
                type="text"
                className="inputMedioModalPolitics"
                defaultValue={RestaurantValueCap}
                onChange={({ target }) => onChange(target.value as string, 'RestaurantValueCap')}/>
            </div>
            </div>       
          </div>
          <div className="contenedorModalPolitics mb31PoliticsModal" >
            <div className="filaDobleCheck">
              <BpCheckbox 
                  NombreCampo={'RestaurantValue'}
                  Value={state.RestaurantValue}
              />
              <span className="textoModalPolitics">Tope de vales de restaurante</span>
            </div>
          </div>
          <div className="contenedorSegundoModalPolitics">
            <div className="contenedorsubtituloModalPolitics">
              <span className="subtituloModalPolitics">Descuento para cálculos</span><div className="iconoAtencion">¡</div>
            </div>
          </div>
          <div className="contenedorModalPolitics" >
            <div className="filaDobleCheck">
              <BpCheckbox
                  NombreCampo={'AbsenceDiscount'}
                  Value={state.AbsenceDiscount}
              />
              <span className="textoModalPolitics">Se descuentan faltas</span>
            </div>
          </div>
          <div className="contenedorModalPolitics" >
            <div className="filaDobleCheck">
              <BpCheckbox
                  NombreCampo={'DisabilityDiscount'}
                  Value={state.DisabilityDiscount}
              />
              <span className="textoModalPolitics">Se descuentan incapacidades</span>
            </div>
          </div>
          <div className="contenedorModalPolitics" >
            <div className="filaDobleCheck">
              <BpCheckbox
                  NombreCampo={'VoucherCost'}
                  Value={state.VoucherCost}
              />
              <span className="textoModalPolitics">Costo vales de restaurante</span>
            </div>
          </div>
        </DialogContent>
        <DialogActions >
          <div className="contenedorBotonesPoliticsModal">
              <button autoFocus onClick={handleClose} className="botonCancelarModal">
                  Cancelar
              </button>
              <button autoFocus onClick={onSumbit} className="botonGuardarModal botonDoble">
              <div className="contenedorIconoBotonModal">
                <SaveIcon fontSize="small"/>
              </div>
              <div>
                Guardar
              </div>
              </button>
          </div>
          </DialogActions>
      </Dialog>
    </div>
  )
}

export default CreaPolitica

